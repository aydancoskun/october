[session]
security = "all"
==
<?php
function onInit() {
    $debug = (gethostbyname("leancode.duckdns.org") == (isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : false) ? true : false);
    //$debug = strtolower(Input::get("debug"));
    if($debug) {
        Debugbar::enable();
        Debugbar::addMessage("ip address:",getHostByName(getHostName()));
        Debugbar::addMessage("page->id",$this->page->id);
        Debugbar::addMessage("page->url",$this->page->url);
        Debugbar::addMessage("page->title",$this->page->title);
        if($this->page->description) Debugbar::addMessage("page->description",$this->page->description);
        if($this->page->meta_title) Debugbar::addMessage("page->meta_title",$this->page->meta_title);
        if($this->page->meta_description) Debugbar::addMessage("page->meta_description",$this->page->meta_description);
        Debugbar::addMessage("page->fileName",$this->page->fileName);
        Debugbar::addMessage("page->baseFileName",$this->page->baseFileName);
    } else {
        Debugbar::disable();
    }
}

function onStart() {
    if (! Auth::check()) return;
    try {
        $user = Auth::getUser();
        $user_id = $user->id;
        $company_id = $user->ok_company_id;
        $sql=   "SELECT ".
                "bs.bp_uid as bp_id,".
                "concat(bs.bp,' (',bs.bp_uid,')') as bp_name,".
                "prime_uid as prime_id,".
                "(SELECT bp_position    FROM operations.bp_supplier_positions bsp WHERE bsp.bp_id = bs.bp_uid AND bsp.company_id = $company_id ) as tpos,".
                "(SELECT applied_credit FROM operations.bp_sponsors           bs1 WHERE bs1.bp_id = bs.bp_uid AND bs1.company_id = $company_id AND bs1.user_id = $user->id AND bs1.start_stamp < now() AND now() < bs1.end_stamp ) AS bp_user_credits, ".
                "(SELECT count(*)+1     FROM operations.bp_supplier_positions bs2 WHERE bs2.bp_id = bs.bp_uid AND bs2.bp_position   > tpos) as bp_low,".
                "(SELECT count(*)       FROM operations.bp_supplier_positions bs3 WHERE bs3.bp_id = bs.bp_uid AND bs3.bp_position  >= tpos) as bp_high, ".
                "(SELECT end_stamp      FROM operations.bp_sponsors           bs4 WHERE bs4.bp_id = bs.bp_uid AND bs4.company_id = $company_id AND bs4.user_id = $user->id AND bs4.start_stamp < now() AND now() < bs4.end_stamp ) AS end_stamp, ".
                "(SELECT applied_credit FROM operations.bp_sponsors           bs4 WHERE bs4.bp_id = bs.bp_uid AND bs4.company_id = $company_id  AND bs4.user_id = $user->id AND bs4.start_stamp < now() AND now() < bs4.end_stamp ) AS bp_credits ".
                "FROM ".
                    "operations.bp_suppliers bs ".
                "WHERE ".
                    "bs.company_uid = $company_id";
        $this['products'] = DB::select($sql);
        if(isset($this['products'][0]) ) {
            $bp_low=$this['products'][0]->bp_low;
            $bp_high=$this['products'][0]->bp_high;
        } else {
            $bp_low = 0;
            $bp_high = 0;
        }
        $company_products_count = count($this['products']);
        $sponored_products_count=0;
        foreach($this['products'] as $product){
            if($product->bp_credits > 0) $sponored_products_count++;
        }
        //Debugbar::addMessage("company_products_count=".$company_products_count);
        //Debugbar::addMessage("sponored_products_count=".$sponored_products_count);
        if($user->ok_company_products_count <>$company_products_count OR $user->ok_sponored_products_count <> $sponored_products_count){
            $user->ok_company_products_count = $company_products_count;
            $user->ok_sponored_products_count = $sponored_products_count;
            $user->save();
        }
        //$this['user'] = $user;
        return;
    } catch (Exception $e) {
        Debugbar::addMessage("No user found");
        Debugbar::addMessage("Msg:".$e->getMessage());
    }
}

function verifyPost($post_name,$check="int"){
    if( !isset($_POST[$post_name]) ) App::abort(403, 'Forbidden');
    $post_val_raw = post($post_name);
    if($check=="int") $post_val_cast = (int) $post_val_raw;
    if($check=="float") $post_val_cast = (float) $post_val_raw;
    if($check=="string") $post_val_cast = (string) $post_val_raw;
    if( $post_val_raw <> $post_val_cast ) App::abort(403, 'Forbidden');
    return $post_val_cast;
}

function onHelp() {
    if (! Auth::check()) return;
    $user = Auth::getUser();
    $state = $this->verifyPost('state',"string");
    $store = $this->verifyPost('store',"string");
    try{
        if($state=="_off") $state=0;
        elseif($state=="_on") $state=1;
        $user->{$store} = $state;
        $user->save();
    } catch (Exception $e) {
        Debugbar::addMessage("No user found to store help");
    }
}
function onClaimFree(){
    if (! Auth::check()) return;
    $user = Auth::getUser();
    $now = time();
    $Amount = $user->ok_free_credits;
    $transaction_date = date( 'Y-m-d H:i:s' );
    $allowed_transaction_date = date( 'Y-m-d H:i:s', strtotime("$transaction_date - 7 days") );
//    \Debugbar::info($Amount,"credits","info:116");
    if($user->ok_free_credits_datetime > $allowed_transaction_date){
        $msg = "Not time yet to top up credits";
        return ['status' => 'error','message' => $msg,'log' => [ 'error'=>$msg,],];
    }
    if($user->ok_credits >= $Amount){
        $msg = "You don't need any top up, You've already got $user->ok_credits credits";
        return ['status' => 'error','message' => $msg ,'log' => [ 'error'=> $msg ,],];
    }
    DB::beginTransaction();
    $user->ok_credits = $Amount;
    $user->ok_purchase_number=$user->ok_purchase_number + 1;
    $user->ok_free_credits_datetime = $transaction_date;
    $user->save();
    DB::table('ok_payments')->insert(
                            array(
                                'company' => $user->company,
                                'user_id' => $user->id,
                                'transaction_date' => $transaction_date,
                                'transaction_currency' => 'FREE',
                                'credits_purchased' => $Amount,
                                'credits_total' => $user->ok_credits,
                                'price_paid' => '0',
                                'charge_id' => 'FREE'.$transaction_date,
                                'download_code' => Hash('sha512',"FREE".$transaction_date),
                                'created_at' => $transaction_date,
                                'updated_at' => $transaction_date,
                                )
    );
    DB::commit();
    return ['status' => 'success','message' => '50 credits added!','log' => [ 'success'=>'$Amount credits added',],];
}
?>
==
{% page %}