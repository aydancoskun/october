[session]
security = "all"
==
<?php
function onInit() {
    $debug = strtolower(Input::get("debug"));
    if($debug=="ipiresearch") {
        Debugbar::enable();
        Debugbar::addMessage($this->page->id, getHostByName(getHostName()));
        Debugbar::addMessage($this->page->id, 'id');
        Debugbar::addMessage($this->page->url, 'url');
        Debugbar::addMessage($this->page->title, 'title');
        Debugbar::addMessage($this->page->description, 'description');
        Debugbar::addMessage($this->page->meta_title, 'meta_title');
        Debugbar::addMessage($this->page->meta_description, 'meta_description');
        Debugbar::addMessage($this->page->fileName, 'fileName');
        Debugbar::addMessage($this->page->baseFileName, 'baseFileName');
        Debugbar::addMessage($this->page->baseFileName, 'baseFileName');
    } else {
        Debugbar::disable();
    }
}

function onStart() {
    if (! Auth::check()) return;
    try {
        $user = Auth::getUser();
        $user_id = $user->id;
        $company_id = $user->ok_company_id;
        $sql=   "SELECT ".
                "bs.bp_uid as bp_id,".
                "concat(bs.bp,' (',bs.bp_uid,')') as bp_name,".
                "prime_uid as prime_id,".
                "(SELECT bp_position    FROM operations.bp_supplier_positions bsp WHERE bsp.bp_id = bs.bp_uid AND bsp.company_id = $company_id ) as tpos,".
                "(SELECT applied_credit FROM operations.bp_sponsors           bs1 WHERE bs1.bp_id = bs.bp_uid AND bs1.company_id = $company_id AND bs1.user_id = $user->id AND bs1.start_stamp < now() AND now() < bs1.end_stamp ) AS bp_user_credits, ".
                "(SELECT count(*)+1     FROM operations.bp_supplier_positions bs2 WHERE bs2.bp_id = bs.bp_uid AND bs2.bp_position   > tpos) as bp_low,".
                "(SELECT count(*)       FROM operations.bp_supplier_positions bs3 WHERE bs3.bp_id = bs.bp_uid AND bs3.bp_position  >= tpos) as bp_high, ".
                "(SELECT end_stamp      FROM operations.bp_sponsors           bs4 WHERE bs4.bp_id = bs.bp_uid AND bs4.company_id = $company_id AND bs4.user_id = $user->id AND bs4.start_stamp < now() AND now() < bs4.end_stamp ) AS end_stamp, ".
                "(SELECT applied_credit FROM operations.bp_sponsors           bs4 WHERE bs4.bp_id = bs.bp_uid AND bs4.company_id = $company_id  AND bs4.user_id = $user->id AND bs4.start_stamp < now() AND now() < bs4.end_stamp ) AS bp_credits ".
                "FROM ".
                    "operations.bp_suppliers bs ".
                "WHERE ".
                    "bs.company_uid = $company_id";
        $this['products'] = DB::select($sql);
        $bp_low=$this['products'][0]->bp_low;
        $bp_high=$this['products'][0]->bp_high;
        $company_products_count = count($this['products']);
        $sponored_products_count=0;
        foreach($this['products'] as $product){
            if($product->bp_credits > 0) $sponored_products_count++;
        }
        if($user->ok_company_products_count <>$company_products_count OR $user->ok_sponored_products_count <> $sponored_products_count){
            $user->ok_company_products_count = $company_products_count;
            $user->ok_sponored_products_count = $sponored_products_count;
            $user->save();
        }
        return;
    } catch (Exception $e) {
        Debugbar::addMessage("No user found");
    }
}

function verifyPost($post_name,$check="int"){
    if( !isset($_POST[$post_name]) ) App::abort(403, 'Forbidden');
    $post_val_raw = post($post_name);
    if($check=="int") $post_val_cast = (int) $post_val_raw;
    if($check=="float") $post_val_cast = (float) $post_val_raw;
    if($check=="string") $post_val_cast = (string) $post_val_raw;
    if( $post_val_raw <> $post_val_cast ) App::abort(403, 'Forbidden');
    return $post_val_cast;
}

function onHelp() {
    if (! Auth::check()) return;
    $user = Auth::getUser();
    $state = $this->verifyPost('state',"string");
    $store = $this->verifyPost('store',"string");
    try{
        if($state=="_off") $state=0;
        elseif($state=="_on") $state=1;
        $user->{$store} = $state;
        $user->save();
    } catch (Exception $e) {
        Debugbar::addMessage("No user found to store help");
    }
}
?>
==
{% page %}