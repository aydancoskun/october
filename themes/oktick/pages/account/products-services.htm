title = "Products & Services"
url = "/account/products-services"
layout = "account"
hidden = "0"
==
<?php
use Illuminate\Http\Response;

function verifyPost($post_name,$check="int"){
    if( !isset($_POST[$post_name]) ) App::abort(403, 'Forbidden');
    $post_val_raw = post($post_name);
    if($check=="int") $post_val_cast = (int) $post_val_raw;
    if($check=="float") $post_val_cast = (float) $post_val_raw;
    if($check=="string") $post_val_cast = (string) $post_val_raw;
    if( $post_val_raw <> $post_val_cast ) App::abort(403, 'Forbidden');
    return $post_val_cast;
}
function onGetEstimatedPosition(){
    $credits_estimated = $this->verifyPost('credits_estimated',"int");
    $bp_id = $this->verifyPost('bp_id',"int");

    $user = $this->session->user()->attributes;

    $company_id = $user['ok_company_id'];
    $user_id = $user['id'];

    $sql="SELECT bp_position FROM operations.bp_supplier_positions WHERE bp_id = $bp_id AND company_id = $company_id";
    $dbr = DB::select($sql);
    $bp_position = (isset($dbr[0])  ? $dbr[0]->bp_position : 0);
    
    $sql="SELECT applied_credit as bp_user_credits FROM operations.bp_sponsors WHERE ".
         "bp_id = $bp_id AND company_id = $company_id AND user_id = $user_id AND ".
         "start_stamp < now() AND now() < end_stamp";
    $dbr = DB::select($sql);
    $bp_user_credits = (isset($dbr[0])  ? $dbr[0]->bp_user_credits : 0);

    $position_new = ($bp_position - $bp_user_credits *10) + $credits_estimated * 10;

    try {
        $sql=   "SELECT count(*)+1 as bp_low FROM operations.bp_supplier_positions ".
                "WHERE ".
                "bp_id = $bp_id AND ".
                "bp_position   > $position_new AND ".
                "company_id <> $company_id";
        $dbr = DB::select($sql);
        $bp_low = (isset($dbr[0])  ? $dbr[0]->bp_low : 0);
//        return ['estimatedPosition' => "$bp_low:".__LINE__];

        $sql=   "SELECT count(*)+1 as bp_high  FROM operations.bp_supplier_positions ".
                "WHERE ".
                "bp_id = $bp_id AND ".
                "bp_position  >= $position_new AND ".
                "company_id <> $company_id";
        $dbr = DB::select($sql);
        $bp_high = (isset($dbr[0])  ? $dbr[0]->bp_high : 0);

        if($bp_low==$bp_high) return ['estimatedPosition' => $bp_low];
        return ['estimatedPosition' => "$bp_low to $bp_high"];
    }
    catch(Exception $e) {
        \Debugbar::addException($e);
        return ['error' => "Something went wrong"];
        return (new Response(['error' => "Something went wrong"], "500"))->header('Content-Type', "text/html; charset=UTF-8");
    }
}


function onCreditConfirm(){
    $now = time();

    $credits_confirmed = $this->verifyPost('credits_confirmed',"int");
    $bp_id = $this->verifyPost('bp_id',"int");

    $user = $this->session->user()->attributes;

    $total_credits = $user['ok_credits'];
    $company_id = $user['ok_company_id'];
    $user_id = $user['id'];

    $sql=   "SELECT bp_position FROM operations.bp_supplier_positions ".
            "WHERE ".
            "bp_id = $bp_id AND ".
            "company_id = $company_id";
    $dbr = DB::select($sql);
    $bp_position = (isset($dbr[0])  ? $dbr[0]->bp_position : 0);
    $bp_user_credits = 0;
    $bp_was_active = false;
    $bp_is_active = false;

    DB::beginTransaction();
    $refund=false;
    $pre_refund_total_credits = $total_credits;
    $over_seconds = 0;
    $sql=   "SELECT ".
            "id, ".
            "applied_credit as bp_user_credits, ".
            "UNIX_TIMESTAMP(end_stamp)-UNIX_TIMESTAMP(start_stamp) as original_duration_secs, ".
            "$now - UNIX_TIMESTAMP(start_stamp) as new_duration_secs, ".
            "start_stamp ".
            "FROM operations.bp_sponsors ".
            "WHERE ".
            "bp_id = $bp_id AND ".
            "company_id = $company_id AND ".
            "user_id = $user_id AND ".
            "UNIX_TIMESTAMP(start_stamp) < $now < UNIX_TIMESTAMP(end_stamp)";
    $dbr = DB::select($sql);
    // If there is a current transaction
    if( isset($dbr[0]) ){
        $bp_was_active=true;
        $bp_user_credits = $dbr[0]->bp_user_credits;
        $cost = $bp_user_credits / $dbr[0]->original_duration_secs * $dbr[0]->new_duration_secs;
        $refund = $bp_user_credits - $cost;
        $total_credits = $total_credits + $refund;
        DB::table('operations.bp_sponsor_transactions_completed')
        ->insert(array(
            'id' => $dbr[0]->id,
            'company_id' => $company_id,
            'bp_id' => $bp_id,
            'user_id' => $user_id,
            'applied_credit' => $bp_user_credits,
            'cost' => $cost,
            'refund' => $refund,
            'start_stamp' => $dbr[0]->start_stamp,
            'end_stamp' => date( 'Y-m-d H:i:s', $now),
        ));
        DB::table('operations.bp_sponsors')->where('id',$dbr[0]->id)->delete();
    }
    $total_credits = $total_credits - $credits_confirmed;
    if($total_credits < 0) {
        if($total_credits < -0.01 && ! $refund) {
            return [
                'status' => 'error',
                'message' => 'Sorry, insufficient credits. Please consider purchasing credits.',
                'log' => "total_credits=$total_credits < -0.01 AND no refund",
            ];
        }
        if($refund){
            if($pre_refund_total_credits < 0.995) {
                return [
                    'status' => 'error',
                    'message' => 'Sorry, insufficient credits. Please consider purchasing credits.',
                    'log' => [  'user_credits' => $total_credits,
                                'bp_user_credits' => $bp_user_credits,
                                'credits_confirmed' => $credits_confirmed,
                                'refund' => $refund,
                                'user_credits' => $total_credits,
                            ],
                ];
            }
            $over_credit = abs($total_credits); // e.g 0.001 POSITIVE
            // One credit is worth 60*60*24*7  = 604800
            $value_of_one_second = 0.000001653; // 1/(60*60*24*7)
            $over_seconds = intval($over_credit / $value_of_one_second) + 1;
            $total_credits=0;
/*
            return [
                'status' => 'error',
                'message' => 'Sorry, insufficient credits. Please consider purchasing credits.',
                'log' => [  'calc' => $total_credits + 0.006 + $refund,
                            'credits_confirmed' => $credits_confirmed,
                            'user_credits' => $total_credits,
                            'over_credit' => $over_credit,
                            'over_seconds' => $over_seconds,
                            'refund' => $refund,
                            'user_credits' => $total_credits,
                        ],
            ];
*/
        }
    }
    $position_new = ($bp_position - $bp_user_credits *10) + $credits_confirmed * 10;
    $one_week = 604800 - $over_seconds;
    $end_stamp_displayed = "None Assigned";
    if($credits_confirmed > 0){
        $end_stamp_displayed = date( 'd/m/y H:i', $now + $one_week );
        $bp_is_active=true;
        DB::table('operations.bp_sponsors')
        ->insert(array(
            'company_id' => $company_id,
            'bp_id' => $bp_id,
            'user_id' => $user_id,
            'applied_credit' => $credits_confirmed,
            'start_stamp' => date( 'Y-m-d H:i:s', $now),
            'end_stamp' => date( 'Y-m-d H:i:s', $now + $one_week ),
        ));
    }
    DB::table('operations.bp_supplier_positions')
    ->where('bp_id', $bp_id)
    ->where('company_id', $company_id)
    ->update(array(
        'bp_position' => $position_new,
    ));
    DB::table('oktick.users')
    ->where('id', $user_id)
    ->update(array(
        'ok_credits' => $total_credits,
    ));
    DB::commit();
    $badge_active=0;
    if ($bp_was_active == false AND $bp_is_active) $badge_active=1;
    if ($bp_was_active AND $bp_is_active == false) $badge_active=-1;
//        if ($bp_was_active == false AND $bp_is_active == false) $badge_active=0;
//        if ($bp_was_active AND $bp_is_active) $badge_active=0;
    return ['ok_credits' => $total_credits,
            'badge_active' => $badge_active,
            'end_stamp' => $end_stamp_displayed,
            'status' => 'success',
            'log' => '',
            ];
//        return (new Response('"'.$Message.'" %'.$ok_credits.'%', "200"))->header('Content-Type', "text/html; charset=UTF-8");
//    return true;
    return (new Response('"here is the error"', "402"))->header('Content-Type', "text/html; charset=UTF-8");
//    return (new Response('"'.$Message.'" %'.$ok_credits.'%', "200"))->header('Content-Type', "text/html; charset=UTF-8");
}
function onProductDelete(){
    $bp_id = $this->verifyPost('bp_id',"int");
    return [
        'status' => 'success',
        'message' => 'Product Deleted!',
        'log' => [  'Product ID' => $bp_id,
                ],
        ];
}
?>
==
{% partial "acc-head" cssfile="oktick.css" %}
{% partial "nav-top"%}

<div class="container">

<h2 class="text-center">Products & Services Management<button id="ok_help_productservices_on" class="help border-none btn btn-default btn-lg {% if user.ok_help_productservices==1 %}collapse{%endif%}"><span class="glyphicon-primary glyphicon glyphicon-info-sign"></span></button></h2>
<div class="row">
    <div class="col-xs-1 col-md-0"></div>
    <div class="col-xs-10 col-md-12">
        <div id="ok_help_productservices" {% if user.ok_help_productservices==0 %}class="collapse"{% endif %} >
            <p>{{"&nbsp;&nbsp;&nbsp;"|raw}}</p>
            <p>Below you can add and delete products and services we have for your business. If you are new here some of these might be not correct because they were semi-automatically collected. In that case just delete them by pressing the <button class="btn btn-default btn-sm"><span class="glyphicon-danger glyphicon glyphicon-remove-sign"></span></button> button. If you want to add products or services you can do that in the field below. Just enter your item, select your choice from the list and click the <button class="btn btn-default btn-sm"><span class="glyphicon-success glyphicon glyphicon-ok-sign"></span></button> button. Items entered do not show up immediately because they are verified by our research team.</p>
            <p>If you don't want to see this each time you get here click below. You can always re-enable it later by clicking on the <button class="btn btn-default btn-sm"><span class="glyphicon-primary glyphicon glyphicon-info-sign"></span></button> sign.</p>
            <div class="text-center">
                
                <button id="ok_help_productservices_off" class="btn btn-default btn-sm help"><span class="glyphicon glyphicon glyphicon-thumbs-up"></span>&nbsp;Got it!</button>
                <br>
                <br>
            </div>
        </div>
    </div>
    <div class="col-xs-1 col-md-0"></div>
</div> 
<br>
<br>
<div class="row">
    <div class="col-xs-1 col-md-0"></div>
    <div class="col-xs-10 col-md-12">
        {% if products %}
        <table class="table table-bordered">
            <tr class="">
                <th class="">Products & Services</th>
                <th class="text-center">Add/Delete</th>
            </tr>
            <tr>
                <td class="text-center">
                    <div class="input-group input-group-lg">
                    <label class="sr-only" for="autocomplete-ajax">Enter Keyword (e.g. Tools, Boots, etc)</label>
                    <input  class="form-control"
                            type="search"
                            name="q"
                            id="autocomplete-ajax" placeholder="Search..." value="{% if search and search != 404 %}{{ search }}{% endif %}" maxlength="100%" size="100%" onclick="$('#autocomplete-ajax').autocomplete().options.serviceUrl='add';
"/>
                </div>
                </td>
                <td class="text-center">
                    <button id="btn-add" class="btn btn-default btn-lg" type="button"><span class="glyphicon-success glyphicon glyphicon-ok-sign"></span></button>
                </td>
            </tr>            
            {% for product in products %}
                <tr class="{% if product.bp_user_credits %}success{%endif%}" id="row{{product.bp_id}}">
                    <td class="" 
                        id="bp{{ product.bp_id }}" 
                        data-bp_id="{{ product.bp_id }}"
                        data-bp_user_credits="{% if product.bp_user_credits %}{{product.bp_user_credits}}{%else%}0{%endif%}">
                        {{ product.bp_name }}
                    </td>

                    <td class="text-center">
                        <button id="go-button" 
                        class="btn-delete btn btn-default btn-lg" 
                        data-bp_id="{{product.bp_id}}"
                        type="button"><span class="glyphicon-danger glyphicon glyphicon-remove-sign "></span></button></button>
                        
                    </td>
                </tr>
            {% endfor %}
        </table>
        {% endif %}
    </div>
    
    <div class="col-xs-1 col-md-0"></div>
</div>

<!-- page specific javascript goes here-->
<script>
function PageInit(){
    $("#badge_total").html("{{products_count}}");

    $('#ButtonCreditPlus').request('onCreditPlus', {
        update: {onCreditChange: '#credit{{product.bp_id}}'}
    });
    $('#ButtonCreditMinus').request('onCreditMinus', {
        update: {onCreditChange: '#credit{{product.bp_id}}'}
    });
}
</script>

</div><!--/container -->
{% partial "acc-nav-bottom" %}
{% partial "acc-foot" %}